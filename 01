;; operators defined in the book
;; -----------------------------
(defun atom? (x)
  (not (listp x)))

;; operators used
;; --------------
car ;; pop the first element of a list
cdr ;; the remaining list after a pop
cons ;; push to the first element of a list
null ;; isNull() isEmpty()
eq ;; ==
= ;; == for numbers
cond ;; kind of switch
or ;; ||
and ;; &&
member ;; x in list ?
rember ;; remove first instance of x in list
1+ ;; ++
1- ;; --
numberp ;; isNumber()
atom ;; !isList()

;; commandments
;; ------------
;; 1- always ask null as the first question in expressing any function on list
;;               zerop                                                    tuple
;;      ...   (null l) as the first and (atom (car l)) as the second ...  list of S-exp
;; 2- use cons to build lists
;; 3- when building a list, describe the first typical element,
;;    and then cons it onto the natural recursion
;; 4- always change at least one argument while recurring.
;;    it must be changed to be closer to termination.
;;    the changing argument must be tester in the termination condifiton:
;;    when using cdr, test termination with null
;;    when using 1-, test termination with zerop
;; 5- when building values with
;;    + always use 0 for the value of the terminating line because n + 0 = n
;;    * always use 1 for the value of the terminating line because n * 1 = n
;;    cons always consider '() for the value of the terminating line
;; 6- simplify only after the function is correct

;; emacs tips
;; M-x ielm
;; M-x eval-buffer
;; "snippet"-ish macro
(setq last-kbd-macro
      "\C-a\C-@\C-e\C-[w\C-a;; my version of \C-e\C-m()\C-[ODdefun \C-y ()\C-m\C-m\C-[OA\C-i()\C-[ODcond\C-m\C-m\C-e\C-[[3~\C-[OA\C-i()\C-[OD")


;; chapter 02
;; my version of lat?: (is it cheating to use a "if" ?)
(defun lat? (x)                                        
  (if (null x)
      t
      (if (atom (car x))
          (lat? (cdr x))
          nil))
)
;; tests
(lat? '(Jack Sprat could eat no chicken fat))
(lat? '((Jack) Sprat could eat no chicken fat))
(lat? '(Jack (Sprat could) eat no chicken fat))
(lat? '())

;; official solution
(defun lat? (l)
  (cond
   ((null l) t)
   ((atom (car l)) (lat? (cdr l)))
   (t nil)))

;; official member? function translated to emacs lisp
(defun member? (a lat)
  (cond
   ((null lat) nil)
   (t (or (eq (car lat) a)
          (member? a (cdr lat))))))

;; my version of rember
(defun rember (a lat)
  (cond
   ((null lat) '())
   ((eq a (car lat)) (cdr lat))
   (t (cons (car lat) (rember a (cdr lat))))))

;; my version of firsts
(defun firsts (l)
  (cond
   ((null l) '())
   (t (cons (car (car l)) (firsts (cdr l))))))

;; my version of insertR
(defun insertR (new old lat)
  (cond 
   ((null lat) '())
   ((eq (car lat) old) (cons old (cons new (cdr lat))))
   (t (cons (car lat) (insertR new old (cdr lat))))))

(insertR 'cream 'ice '(ice sandwitch android distribution))
(insertR 'e 'd '(a b c d))
(insertR 'e 'd '(a b c d f g d h))

;; my version of insertL
(defun insertL (new old lat)
  (cond 
   ((null lat) '())
   ((eq (car lat) old) (cons new lat))
   (t (cons (car lat) (insertL new old (cdr lat))))))

(insertL 'cream 'ice '(ice sandwitch android distribution))
(insertL 'e 'd '(a b c d))
(insertL 'e 'd '(a b c d f g d h))

;; my version of subst
(defun subst (new old lat)
  (cond 
   ((null lat) '())
   ((eq (car lat) old) (cons new (cdr lat)))
   (t (cons (car lat) (subst new old (cdr lat))))))

(subst 'poneys 'horses '(horses are cute))
(subst 'poneys 'horses '(i really like horses))
(subst 'poneys 'horses '(the horses are cute and the horses run fast))

;; my version of subst2
(defun subst2 (new o1 o2 lat)
  (cond 
   ((null lat) '())
   ((eq (car lat) o1) (cons new (cdr lat)))
   ((eq (car lat) o2) (cons new (cdr lat)))
   (t (cons (car lat) (subst2 new o1 o2 (cdr lat))))))

(subst2 'lammas 'horses 'poneys '(horses and poneys are cute))
(subst2 'lammas 'horses 'poneys '(i like poneys))
(subst2 'lammas 'horses 'poneys '(what is your favorite between poneys and horses))

;; not asked, but i need it for the next one (eq for lists)
(defun leq (l1 l2)
  (cond
   ((and (null l1) (null l2)) t)
   ((or (null l1) (null l2)) nil)
   ((eq (car l1) (car l2)) (leq (cdr l1) (cdr l2)))
   (t nil)))

(leq '(my poney is the cuttest) '(my poney is the cuttest))
(leq '(my poney is the cuttest) '(your poney is the cuttest))
(leq '(my poney is the cuttest) '(my poney is teh cuttest))
(leq '(my poney is the cuttest) '(my poney is the cuttest!))
(leq '(my poney is the cuttest) '(my poney is the))
(leq '(my poney is the) '(my poney is the cuttest))

;; my version of multirember (using rember)
(defun multirember (a lat)
  (cond
   ((leq (rember a lat) lat) lat)
   (t (multirember a (rember a lat)))))

(multirember 'cup '(cup of tea))
(multirember 'cup '(a tea cup))
(multirember 'cup '(coffee cup tea cup and hick cup))

;; my second version of multirember
(defun multirember (a lat)
  (cond
   ((null lat) '())
   ((eq (car lat) a) (multirember a (cdr lat)))
   (t (cons (car lat) (multirember a (cdr lat))))))

(multirember 'cup '(cup of tea))
(multirember 'cup '(a tea cup))
(multirember 'cup '(coffee cup tea cup and hick cup))

;; my version of multiinsertR
(defun multiinsertR (new old lat)
  (cond 
   ((null lat) '())
   ((eq (car lat) old) (cons old (cons new (multiinsertR new old (cdr lat)))))
   (t (cons (car lat) (multiinsertR new old (cdr lat))))))

(multiinsertR 'cream 'ice '(ice sandwitch android distribution))
(multiinsertR 'e 'd '(a b c d))
(multiinsertR 'e 'd '(a b c d f g d h))

;; my version of multiinsertL
(defun multiinsertL (new old lat)
  (cond 
   ((null lat) '())
   ((eq (car lat) old) (cons new (cons old (multiinsertL new old (cdr lat)))))
   (t (cons (car lat) (multiinsertL new old (cdr lat))))))

(multiinsertL 'cream 'ice '(ice sandwitch android distribution))
(multiinsertL 'e 'd '(a b c d))
(multiinsertL 'e 'd '(a b c d f g d h))

;; my version of multisubst
(defun multisubst (new old lat)
  (cond 
   ((null lat) '())
   ((eq (car lat) old) (cons new (multisubst new old (cdr lat))))
   (t (cons (car lat) (multisubst new old (cdr lat))))))

(multisubst 'poneys 'horses '(horses are cute))
(multisubst 'poneys 'horses '(i really like horses))
(multisubst 'poneys 'horses '(the horses are cute and the horses run fast))

;; chapter 04
;; my version of +
(defun my+ (x y)
  (cond
   ((zerop y) x)
   (t (my+ (1+ x) (1- y)))))

(my+ 40 2)
(my+ 2 40)
(my+ 0 12)
(my+ 12 0)

;; my version of -
(defun my- (x y)
  (cond
   ((zerop y) x)
   (t (1- (my- x (1- y))))))

(my- 40 2)
(my- 2 10) 
(my- 0 12)
(my- 12 0)

;; my version of addtup
(defun addtup (tup)
  (cond
   ((null tup) 0)
   (t (+ (car tup) (addtup (cdr tup))))))

(addtup '(15 3 4 12))

;; my version of x
(defun my* (x y)
  (cond
   ((zerop y) 0)
   (t (+ x (my* x (1- y))))))

(my* 5 3)
(my* 12 42)

;; my version of tup+
(defun tup+ (tup1 tup2)
  (cond
   ((and (null tup1) (null tup2)) '())
   ((null tup1) tup2)
   ((null tup2) tup1)
   (t (cons (+ (car tup1) (car tup2)) (tup+ (cdr tup1) (cdr tup2))))))

(tup+ '(1 2 3 4) '(4 3 2 1))
(tup+ '(1 2 3 4) '(1 2 3 4))
(tup+ '(1 2 3 4) '(1))
(tup+ '(1) '(1 2 3 4))

;; my version of >
(defun my> (x y)
  (cond
   ((zerop x) nil)
   ((zerop y) t)
   (t (my> (1- x) (1- y)))))

(my> 10 3)
(my> 3 10)
(my> 10 10)

;; my version of <
(defun my< (x y)
  (cond
   ((zerop y) nil)
   ((zerop x) t)
   (t (my< (1- x) (1- y)))))

(my< 10 3)
(my< 3 10)
(my< 10 10)

;; my version of =
(defun my= (x y)
  (cond
   ((or (my< x y) (my> x y)) nil)
   (t t)))

(my= 10 3)
(my= 3 10)
(my= 10 10)

;; my version of pow
(defun pow (x y)
  (cond
   ((zerop y) 1)
   (t (* x (pow x (1- y))))))

(pow 1 1)
(pow 2 3)
(pow 5 3)

;; my version of length
(defun length (lat)
  (cond
   ((null lat) 0)
   (t (1+ (length (cdr lat))))))

(length '(i am a fairly short sentence))
(length '())

;; my version of pick
(defun pick (n lat)
  (cond
   ((or (zerop n) (null lat)) '())
   ((= n 1) (car lat))
   (t (pick (1- n) (cdr lat)))))

(pick 5 '(i am a fairly short sentence))
(pick 0 '(i am a fairly short sentence))
(pick 7 '(i am a fairly short sentence))

;; my version of rempick
(defun rempick (n lat)
  (cond
   ((= n 1) (cdr lat))
   (t (cons (car lat) (rempick (1- n) (cdr lat))))))

(rempick 3 '(i like big poneys))

;; my version of no-nums
(defun no-nums (lat)
  (cond
   ((null lat) '())
   ((numberp (car lat)) (no-nums (cdr lat)))
   (t (cons (car lat) (no-nums (cdr lat))))))

(no-nums '(5 pears 2 prunes 42 almonds))

;; my version of all-nums
(defun all-nums (lat)
  (cond
   ((null lat) '())
   ((not (numberp (car lat))) (all-nums (cdr lat)))
   (t (cons (car lat) (all-nums (cdr lat))))))

(all-nums '(5 pears 2 prunes 42 almonds))

;; my version of eqan
(defun eqan (x y)
  (cond
   ((and (numberp x) (numberp y)) (= x y))
   ((or (numberp x) (numberp y)) nil)
   (t (eq x y))))

(eqan 4 4)
(eqan 4 5)
(eqan 'foo 4)
(eqan 4 'foo)
(eqan 'foo 'foo)
(eqan 'foo 'bar)

;; my version of occur
(defun occur (a lat)
  (cond
   ((null lat) 0)
   ((eq (car lat) a) (1+ (occur a (cdr lat))))
   (t (occur a (cdr lat)))))

(occur 'cats '(i like cats but cats like fish so cats are mean))
(occur 'apple '(bananas are yellow))

;; my version of one
(defun one (n)
  (eq n 1))

(one 1)
(one 42)
(one 11)

;; chapter 05
;; my version of rember*
(defun rember* (a l)
  (cond
   ((null l) '())
   ((eq (car l) a) (rember* a (cdr l)))
   ((atom (car l)) (cons (car l) (rember* a (cdr l))))
   (t (cons (rember* a (car l)) (rember* a (cdr l))))))

(rember* 'cup '((coffee) cup ((tea) cup) (and (hick)) cup))
(rember* 'sauce '(((tomato sauce)) ((bean) sauce) (and ((flying)) sauce)))

;; my version of insertR*
(defun insertR* (new old l)
  (cond
   ((null l) '())
   ((eq (car l) old) (cons old (cons new (insertR* new old (cdr l)))))
   ((atom (car l)) (cons (car l) (insertR* new old (cdr l))))
   (t (cons (insertR* new old (car l)) (insertR* new old (cdr l))))))

(insertR* 'roast 'chuck '((how much (wood)) could ((a (wood) chuck))(((chuck)))(if (a) ((wood chuck))) could chuck wood))

;; my version of occur*
(defun occur* (a l)
  (cond
   ((null l) 0)
   ((eq (car l) a) (1+ (occur* a (cdr l))))
   ((atom (car l)) (occur* a (cdr l)))
   (t (+ (occur* a (car l)) (occur* a (cdr l))))))

(occur* 'banana '((banana) (split ((((banana ice))) (cream (banana)) sherbet)) (banana) (bread) (banana brandy)))

;; my version of subst*
(defun subst* (new old l)
  (cond
   ((null l) '())
   ((eq (car l) old) (cons new (subst* new old (cdr l))))
   ((atom (car l)) (cons (car l) (subst* new old (cdr l))))
   (t (cons (subst* new old (car l)) (subst* new old (cdr l))))))

(print (subst* 'orange 'banana '((banana) (split ((((banana ice))) (cream (banana)) sherbet)) (banana) (bread) (banana brandy))))

;; my version of insertL*
(defun insertL* (new old l)
  (cond
   ((null l ) '())
   ((eq (car l) old) (cons new (cons old (insertL* new old (cdr l)))))
   ((atom (car l)) (cons (car l) (insertL* new old (cdr l))))
   (t (cons (insertL* new old (car l)) (insertL* new old (cdr l))))))

(insertL* 'pecker 'chuck '((how much (wood)) could ((a (wood) chuck)) (((chuck))) (if (a) ((wood chuck))) could chuck wood))

;; my version of member*
(defun member* (a l)
  (cond
   ((null l) nil)
   ((eq (car l) a) t)
   ((atom (car l)) (member* a (cdr l)))
   (t (or (member* a (car l)) (member* a (cdr l))))))

(member* 'chips '((potato) (chips ((with) fish) chips)))
(member* 'chips '((potato) (chips ((with) fish))))
(member* 'chips '((potato) (((with) fish))))

;; my version of leftmost
(defun leftmost (l)
  (cond
   ((atom (car l)) (car l))
   (t (leftmost (car l)))))

(leftmost '((potato) (chips ((with) fish) (chips))))
(leftmost '(((hot) (tuna (and))) cheese))
(leftmost '(((() four)) 17 (seventeen)))
(leftmost '())

;; my version of eqlist
(defun eqlist (l1 l2)
  (cond
   ((and (null l1) (null l2)) t)
   ((and (atom (car l1))
         (atom (car l2))
         (eq (car l1) (car l2))) (eqlist (cdr l1) (cdr l2)))
   ((and (not (atom (car l1)))
         (not (atom (car l2)))
         (eqlist (car l1) (car l2)) (eqlist (cdr l1) (cdr l2))))
   (t nil)))

(eqlist '(strawberry ice cream) '(strawberry ice cream))
(eqlist '(strawberry ice cream) '(strawberry cream ice))
(eqlist '() '())
(eqlist '() '(foo))
(eqlist '(banana ((split))) '((banana) (split)))
(eqlist '(beef ((sausage)) (and (soda))) '(beef ((salami)) (and (soda))))
(eqlist '(beef ((sausage)) (and (soda))) '(beef ((sausage)) (and (soda))))














